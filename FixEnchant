package sFixEnchant;

import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
//EVENT\\
//EVENT\\
//EVENT\\
import org.bukkit.event.entity.EntityDamageByEntityEvent; //1\\
import org.bukkit.event.entity.EntityInteractEvent; //2\\
import org.bukkit.event.inventory.InventoryCloseEvent; //3\\
import org.bukkit.event.player.PlayerInteractAtEntityEvent; //4\\
import org.bukkit.event.player.PlayerInteractEvent; //5\\
import org.bukkit.event.player.PlayerItemHeldEvent; //6\\
import org.bukkit.event.player.PlayerMoveEvent; //7\\
import org.bukkit.event.player.PlayerSwapHandItemsEvent; //8\\
//END EVENT\\
//END EVENT\\
//END EVENT\\
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.java.JavaPlugin;
import io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue;
import io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue.Consumer;

@SuppressWarnings({ "unused" })
public class Main extends JavaPlugin implements Listener {
	
	public FileConfiguration config;
	
	public void onLoad() {
        this.saveDefaultConfig();
		
	}
	
 public void onEnable() {
 getLogger().info("Enabled");
 this.getServer().getPluginManager().registerEvents(this, this);
         
}

public void onDisable() {
 getLogger().info("Disabled");
 
 }
 
//EVENT\\
//EVENT\\
//EVENT\\
 
//1\\
 
@EventHandler(priority=EventPriority.HIGHEST)
public void EntityDamageByEntityEvent(EntityDamageByEntityEvent e) {
if (e.getDamager() instanceof Player) {
Player player = (Player)((Object)e.getDamager());
boolean a = this.check(player.getInventory().getHelmet(), player, p -> p.getInventory().setHelmet(null));
boolean s = this.check(player.getInventory().getChestplate(), player, p -> p.getInventory().setChestplate(null));
boolean d = this.check(player.getInventory().getLeggings(), player, p -> p.getInventory().setLeggings(null));
boolean f = this.check(player.getInventory().getBoots(), player, p -> p.getInventory().setBoots(null));
boolean g = this.check(player.getInventory().getItemInMainHand(), player, p -> p.getInventory().setItemInMainHand(null));
boolean h = this.check(player.getInventory().getItemInOffHand(), player, p -> p.getInventory().setItemInOffHand(null));
boolean j = this.check(player.getInventory().getHeldItemSlot(), player, p -> p.getInventory().setItemInOffHand(null));
if (a || s || d || f || g || h || j) {
e.setCancelled(true);
this.detected(player);

}
}
}

//2\\
 
@EventHandler(priority=EventPriority.HIGHEST)
public void EntityInteractEvent(EntityInteractEvent e) {
if (e.getEntity() instanceof Player) {
Player player = (Player)((Object)e.getEntity());
boolean a = this.check(player.getInventory().getHelmet(), player, p -> p.getInventory().setHelmet(null));
boolean s = this.check(player.getInventory().getChestplate(), player, p -> p.getInventory().setChestplate(null));
boolean d = this.check(player.getInventory().getLeggings(), player, p -> p.getInventory().setLeggings(null));
boolean f = this.check(player.getInventory().getBoots(), player, p -> p.getInventory().setBoots(null));
boolean g = this.check(player.getInventory().getItemInMainHand(), player, p -> p.getInventory().setItemInMainHand(null));
boolean h = this.check(player.getInventory().getItemInOffHand(), player, p -> p.getInventory().setItemInOffHand(null));
boolean j = this.check(player.getInventory().getHeldItemSlot(), player, p -> p.getInventory().setItemInOffHand(null));
if (a || s || d || f || g || h || j) {
e.setCancelled(true);
this.detected(player);

}
}
}
 
//3\\
 
@EventHandler(priority=EventPriority.HIGHEST)
public void PlayerInteractEvent(PlayerInteractEvent e) {
if (e.getPlayer() instanceof Player) {
Player player = (Player)((Object)e.getPlayer());
boolean a = this.check(player.getInventory().getHelmet(), player, p -> p.getInventory().setHelmet(null));
boolean s = this.check(player.getInventory().getChestplate(), player, p -> p.getInventory().setChestplate(null));
boolean d = this.check(player.getInventory().getLeggings(), player, p -> p.getInventory().setLeggings(null));
boolean f = this.check(player.getInventory().getBoots(), player, p -> p.getInventory().setBoots(null));
boolean g = this.check(player.getInventory().getItemInMainHand(), player, p -> p.getInventory().setItemInMainHand(null));
boolean h = this.check(player.getInventory().getItemInOffHand(), player, p -> p.getInventory().setItemInOffHand(null));
boolean j = this.check(player.getInventory().getHeldItemSlot(), player, p -> p.getInventory().setItemInOffHand(null));
if (a || s || d || f || g || h || j) {
e.setCancelled(true);
this.detected(player);

}
}
}

//4\\

@EventHandler(priority=EventPriority.HIGHEST)
public void PlayerMoveEvent(PlayerMoveEvent e) {
if (e.getPlayer() instanceof Player) {
Player player = (Player)((Object)e.getPlayer());
boolean a = this.check(player.getInventory().getHelmet(), player, p -> p.getInventory().setHelmet(null));
boolean s = this.check(player.getInventory().getChestplate(), player, p -> p.getInventory().setChestplate(null));
boolean d = this.check(player.getInventory().getLeggings(), player, p -> p.getInventory().setLeggings(null));
boolean f = this.check(player.getInventory().getBoots(), player, p -> p.getInventory().setBoots(null));
boolean g = this.check(player.getInventory().getItemInMainHand(), player, p -> p.getInventory().setItemInMainHand(null));
boolean h = this.check(player.getInventory().getItemInOffHand(), player, p -> p.getInventory().setItemInOffHand(null));
boolean j = this.check(player.getInventory().getHeldItemSlot(), player, p -> p.getInventory().setItemInOffHand(null));
if (a || s || d || f || g || h || j) {
e.setCancelled(true);
this.detected(player);

}
}
}

//5\\

@EventHandler(priority=EventPriority.HIGHEST)
public void PlayerItemHeldEvent(PlayerItemHeldEvent e) {
if (e.getPlayer() instanceof Player) {
Player player = (Player)((Object)e.getPlayer());
boolean a = this.check(player.getInventory().getHelmet(), player, p -> p.getInventory().setHelmet(null));
boolean s = this.check(player.getInventory().getChestplate(), player, p -> p.getInventory().setChestplate(null));
boolean d = this.check(player.getInventory().getLeggings(), player, p -> p.getInventory().setLeggings(null));
boolean f = this.check(player.getInventory().getBoots(), player, p -> p.getInventory().setBoots(null));
boolean g = this.check(player.getInventory().getItemInMainHand(), player, p -> p.getInventory().setItemInMainHand(null));
boolean h = this.check(player.getInventory().getItemInOffHand(), player, p -> p.getInventory().setItemInOffHand(null));
boolean j = this.check(player.getInventory().getHeldItemSlot(), player, p -> p.getInventory().setItemInOffHand(null));
if (a || s || d || f || g || h || j) {
e.isCancelled();
this.detected(player);

}
}
}

//6\\

@EventHandler(priority=EventPriority.HIGHEST)
public void PlayerSwapHandItemsEvent(PlayerSwapHandItemsEvent e) {
if (e.getPlayer() instanceof Player) {
Player player = (Player)((Object)e.getPlayer());
boolean a = this.check(player.getInventory().getHelmet(), player, p -> p.getInventory().setHelmet(null));
boolean s = this.check(player.getInventory().getChestplate(), player, p -> p.getInventory().setChestplate(null));
boolean d = this.check(player.getInventory().getLeggings(), player, p -> p.getInventory().setLeggings(null));
boolean f = this.check(player.getInventory().getBoots(), player, p -> p.getInventory().setBoots(null));
boolean g = this.check(player.getInventory().getItemInMainHand(), player, p -> p.getInventory().setItemInMainHand(null));
boolean h = this.check(player.getInventory().getItemInOffHand(), player, p -> p.getInventory().setItemInOffHand(null));
boolean j = this.check(player.getInventory().getHeldItemSlot(), player, p -> p.getInventory().setItemInOffHand(null));
if (a || s || d || f || g || h || j) {
e.isCancelled();
this.detected(player);

}
}
}

//7\\

@EventHandler(priority=EventPriority.HIGHEST)
public void InventoryCloseEvent(InventoryCloseEvent e) {
if (e.getPlayer() instanceof Player) {
Player player = (Player)((Object)e.getPlayer());
boolean a = this.check(player.getInventory().getHelmet(), player, p -> p.getInventory().setHelmet(null));
boolean s = this.check(player.getInventory().getChestplate(), player, p -> p.getInventory().setChestplate(null));
boolean d = this.check(player.getInventory().getLeggings(), player, p -> p.getInventory().setLeggings(null));
boolean f = this.check(player.getInventory().getBoots(), player, p -> p.getInventory().setBoots(null));
boolean g = this.check(player.getInventory().getItemInMainHand(), player, p -> p.getInventory().setItemInMainHand(null));
boolean h = this.check(player.getInventory().getItemInOffHand(), player, p -> p.getInventory().setItemInOffHand(null));
boolean j = this.check(player.getInventory().getHeldItemSlot(), player, p -> p.getInventory().setItemInOffHand(null));
if (a || s || d || f || g || h || j) {
e.getPlayer();
this.detected(player);

}
}
}

//8\\

@EventHandler(priority=EventPriority.HIGHEST)
public void PlayerInteractAtEntityEvent(PlayerInteractAtEntityEvent e) {
if (e.getPlayer() instanceof Player) {
Player player = (Player)((Object)e.getPlayer());
boolean a = this.check(player.getInventory().getHelmet(), player, p -> p.getInventory().setHelmet(null));
boolean s = this.check(player.getInventory().getChestplate(), player, p -> p.getInventory().setChestplate(null));
boolean d = this.check(player.getInventory().getLeggings(), player, p -> p.getInventory().setLeggings(null));
boolean f = this.check(player.getInventory().getBoots(), player, p -> p.getInventory().setBoots(null));
boolean g = this.check(player.getInventory().getItemInMainHand(), player, p -> p.getInventory().setItemInMainHand(null));
boolean h = this.check(player.getInventory().getItemInOffHand(), player, p -> p.getInventory().setItemInOffHand(null));
boolean j = this.check(player.getInventory().getHeldItemSlot(), player, p -> p.getInventory().setItemInOffHand(null));
if (a || s || d || f || g || h || j) {
e.isCancelled();
this.detected(player);

}
}
}

private boolean check(int heldItemSlot, Player player, Consumer<Player> playerConsumer) {
return false;

}
	
//END EVENT\\
//END EVENT\\
//END EVENT\\

private void checkPlayer(Player player) {
boolean c = false;
ItemStack[] itemStackArray = player.getInventory().getContents();
int n = itemStackArray.length;
int n2 = 0;
while (n2 < n) {
ItemStack stack = itemStackArray[n2];
if (this.check(stack, player, p -> stack.setAmount(0))) {
c = true;

++n2;

}

if (c) {
this.detected(player); 

}
}
}

private boolean check(ItemStack stack, Player player, MessagePassingQueue.Consumer<Player> playerConsumer) {
if (stack == null) {
return false;    
}

boolean a = this.checkEnchant(stack, player, playerConsumer);
return a || a;

}

private boolean checkEnchant(ItemStack stack, Player player, MessagePassingQueue.Consumer<Player> playerConsumer) {
for (Integer enchLevel : stack.getEnchantments().values()) {
if (enchLevel <= this.getConfig().getInt("maxlevel", 5)) continue;
if (this.getConfig().getBoolean("remove")) {
playerConsumer.accept((Player)player);
}

return true;

}

return false;

}

private void detected(Player player) {
if (this.getConfig().getBoolean("punish.enable")) {
Bukkit.dispatchCommand(Bukkit.getConsoleSender(), this.getConfig().getString("punish.command").replace("%player", player.getName()));

}
}
}
